generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  role       String
  img        String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  albums     Album[]  
  photos     Photo[]
}

model News {
  id            Int      @id @default(autoincrement())
  image         String?
  imagePublicId String?
  title         String
  text          String
  date          String
  category      String
  excerpt       String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model TeamMember {
  id            Int      @id @default(autoincrement())
  name          String
  role          String
  description   String
  image         String
  imagePublicId String?
  isFounder     Boolean  @default(false)
  displayOrder  Int      @default(0)
  isActive      Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("team_members")
}

model NewsletterSubscriber {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  isActive   Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("newsletter_subscribers")
}

model ShortVideos {
  id            Int      @id @default(autoincrement())
  video         String?
  videoPublicId String?
  title         String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

    @@map("ShortVideos")
}

model Album {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  category    String
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int
  
  photos      Photo[]
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@map("albums")
}

model Photo {
  id          Int      @id @default(autoincrement())
  imageUrl    String
  publicId    String
  description String?
  createdAt   DateTime @default(now())
  albumId     Int
  uploadedBy  Int
  
  album       Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  uploader    User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  
  @@map("photos")
}